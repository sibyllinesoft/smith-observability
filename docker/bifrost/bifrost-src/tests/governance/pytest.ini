[tool:pytest]
# Pytest configuration for Bifrost Governance Plugin Testing

# Test discovery
testpaths = .
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts = 
    -ra
    --strict-markers
    --strict-config
    --color=yes
    --tb=short
    --maxfail=10
    --durations=10
    --verbose

# Markers for test categorization
markers =
    governance: Tests for governance functionality
    virtual_keys: Virtual Key CRUD and management tests
    teams: Team CRUD and management tests
    customers: Customer CRUD and management tests
    budget: Budget-related tests
    rate_limit: Rate limiting tests
    usage_tracking: Usage tracking and monitoring tests
    crud: CRUD operation tests
    field_updates: Comprehensive field update tests
    validation: Validation and constraint tests
    integration: Integration and end-to-end tests
    edge_cases: Edge cases and boundary condition tests
    concurrency: Concurrency and race condition tests
    mutual_exclusivity: Mutual exclusivity constraint tests
    hierarchical: Hierarchical governance tests
    slow: Tests that run slowly (> 5 seconds)
    smoke: Smoke tests for quick validation
    regression: Regression tests
    api: API endpoint tests
    relationships: Entity relationship tests
    cleanup: Tests that require special cleanup
    security: Security-related tests

# Test timeout (in seconds)
timeout = 300

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::requests.packages.urllib3.disable_warnings

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = governance_tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration (when using --cov)
[coverage:run]
source = .
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    .tox/*

[coverage:report]
precision = 2
show_missing = true
skip_covered = false

[coverage:html]
directory = htmlcov