{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "$id": "https://www.getbifrost.ai/schema",
  "title": "Bifrost Configuration Schema",
  "description": "Schema for Bifrost HTTP transport configuration",
  "type": "object",
  "properties": {
    "client": {
      "type": "object",
      "description": "Client configuration settings",
      "properties": {
        "drop_excess_requests": {
          "type": "boolean",
          "description": "Whether to drop excess requests when pool is full"
        },
        "initial_pool_size": {
          "type": "integer",
          "minimum": 1,
          "description": "Initial size of the connection pool",
          "default": 300
        },
        "prometheus_labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Labels to use for Prometheus metrics"
        },
        "allowed_origins": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "const": "*"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ]
          },
          "description": "CORS allowed origins (supports \"*\" or URI strings)"
        },
        "enable_logging": {
          "type": "boolean",
          "description": "Enable request/response logging"
        },
        "enable_governance": {
          "type": "boolean",
          "description": "Enable governance features"
        },
        "enforce_governance_header": {
          "type": "boolean",
          "description": "Enforce governance header. This will require every incoming request to include x-bf-vk header."
        },
        "allow_direct_keys": {
          "type": "boolean",
          "description": "Allow provider keys"
        },
        "max_request_body_size_mb": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum request body size in MB"
        },
        "enable_litellm_fallbacks": {
          "type": "boolean",
          "description": "Enable litellm-specific fallbacks for text completion for Groq"
        }
      },
      "additionalProperties": false
    },
    "providers": {
      "type": "object",
      "description": "AI provider configurations",
      "properties": {
        "openai": {
          "$ref": "#/$defs/provider"
        },
        "anthropic": {
          "$ref": "#/$defs/provider"
        },
        "bedrock": {
          "$ref": "#/$defs/provider_with_bedrock_config"
        },
        "cohere": {
          "$ref": "#/$defs/provider"
        },
        "azure": {
          "$ref": "#/$defs/provider_with_azure_config"
        },
        "vertex": {
          "$ref": "#/$defs/provider_with_vertex_config"
        },
        "mistral": {
          "$ref": "#/$defs/provider"
        },
        "ollama": {
          "$ref": "#/$defs/provider"
        },
        "groq": {
          "$ref": "#/$defs/provider"
        },
        "gemini": {
          "$ref": "#/$defs/provider"
        },
        "openrouter": {
          "$ref": "#/$defs/provider"
        },
        "sgl": {
          "$ref": "#/$defs/provider"
        },
        "parasail": {
          "$ref": "#/$defs/provider"
        },
        "cerebras": {
          "$ref": "#/$defs/provider"
        }
      },
      "additionalProperties": true
    },
    "mcp": {
      "type": "object",
      "description": "Model Context Protocol configuration",
      "properties": {
        "client_configs": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/mcp_client_config"
          },
          "description": "MCP client configurations"
        }
      },
      "additionalProperties": false
    },
    "vector_store": {
      "type": "object",
      "description": "Vector store configuration for caching",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable vector store"
        },
        "type": {
          "type": "string",
          "enum": [
            "weaviate"
          ],
          "description": "Vector store type"
        },
        "config": {
          "anyOf": [
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "weaviate"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/weaviate_config"
              }
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "config_store": {
      "type": "object",
      "description": "Configuration store settings",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable configuration store"
        },
        "type": {
          "type": "string",
          "enum": [
            "sqlite",
            "postgres"
          ],
          "description": "Configuration store type"
        },
        "config": {
          "anyOf": [
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "sqlite"
                  }
                }
              },
              "then": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Database file path"
                  }
                },
                "required": [
                  "path"
                ],
                "additionalProperties": false
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "postgres"
                  }
                }
              },
              "then": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "description": "Database host"
                  },
                  "port": {
                    "type": "string",
                    "description": "Database port"
                  },
                  "user": {
                    "type": "string",
                    "description": "Database user"
                  },
                  "password": {
                    "type": "string",
                    "description": "Database password. Leave empty if you want to use IAM role authentication."
                  },
                  "db_name": {
                    "type": "string",
                    "description": "Database name"
                  },
                  "ssl_mode": {
                    "type": "string",
                    "description": "Database SSL mode"
                  }
                },
                "required": [
                  "host",
                  "port",
                  "user",
                  "password",
                  "db_name",
                  "ssl_mode"
                ],
                "additionalProperties": false
              }
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "logs_store": {
      "type": "object",
      "description": "Logs store settings",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable logs store"
        },
        "type": {
          "type": "string",
          "enum": [
            "sqlite",
            "postgres"
          ],
          "description": "Logs store type"
        },
        "config": {
          "type": "object",
          "oneOf": [
            {
              "if": {
                "properties": {
                  "../type": {
                    "const": "sqlite"
                  }
                }
              },
              "then": {
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Database file path"
                  }
                },
                "required": [
                  "path"
                ],
                "additionalProperties": false
              }
            },
            {
              "if": {
                "properties": {
                  "../type": {
                    "const": "postgres"
                  }
                }
              },
              "then": {
                "properties": {
                  "host": {
                    "type": "string",
                    "description": "Database host"
                  },
                  "port": {
                    "type": "integer",
                    "description": "Database port"
                  },
                  "user": {
                    "type": "string",
                    "description": "Database user"
                  },
                  "password": {
                    "type": "string",
                    "description": "Database password. Leave empty if you want to use IAM role authentication."
                  },
                  "db_name": {
                    "type": "string",
                    "description": "Database name"
                  },
                  "ssl_mode": {
                    "type": "string",
                    "description": "Database SSL mode"
                  }
                },
                "required": [
                  "host",
                  "port",
                  "user",
                  "password",
                  "db_name",
                  "ssl_mode"
                ],
                "additionalProperties": false
              }
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "plugins": {
      "type": "array",
      "description": "Plugins configuration",
      "items": {
        "type": "object",
        "required": [
          "enabled",
          "name"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable plugins"
          },
          "name": {
            "type": "string",
            "description": "Name of the plugin (built-in: telemetry, logging, governance, maxim, semanticcache, otel, or custom plugin name)"
          },
          "config": {
            "type": "object",
            "description": "Configuration for the plugin"
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "name": {
                  "const": "telemetry"
                }
              }
            },
            "then": {
              "required": [
                "config"
              ],
              "properties": {
                "config": {
                  "type": "object",
                  "description": "Configuration for the telemetry plugin (Prometheus metrics)",
                  "properties": {},
                  "additionalProperties": false
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "name": {
                  "const": "logging"
                }
              }
            },
            "then": {
              "required": [
                "config"
              ],
              "properties": {
                "config": {
                  "type": "object",
                  "description": "Configuration for the logging plugin",
                  "properties": {},
                  "additionalProperties": false
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "name": {
                  "const": "governance"
                }
              }
            },
            "then": {
              "required": [
                "config"
              ],
              "properties": {
                "config": {
                  "type": "object",
                  "description": "Configuration for the governance plugin",
                  "properties": {
                    "is_vk_mandatory": {
                      "type": "boolean",
                      "description": "Whether virtual key (x-bf-vk header) is mandatory for all requests"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "name": {
                  "const": "maxim"
                }
              }
            },
            "then": {
              "required": [
                "config"
              ],
              "properties": {
                "config": {
                  "type": "object",
                  "description": "Configuration for the Maxim SDK integration plugin",
                  "properties": {
                    "api_key": {
                      "type": "string",
                      "description": "API key for Maxim SDK authentication"
                    },
                    "log_repo_id": {
                      "type": "string",
                      "description": "Optional default ID for the Maxim logger instance"
                    }
                  },
                  "required": [
                    "api_key"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "name": {
                  "const": "semanticcache"
                }
              }
            },
            "then": {
              "required": [
                "config"
              ],
              "properties": {
                "config": {
                  "type": "object",
                  "description": "Configuration for the semantic cache plugin",
                  "properties": {
                    "provider": {
                      "type": "string",
                      "description": "Provider to use for generating embeddings",
                      "enum": [
                        "openai",
                        "anthropic",
                        "gemini",
                        "bedrock",
                        "azure",
                        "cohere",
                        "mistral",
                        "groq",
                        "ollama",
                        "openrouter",
                        "vertex",
                        "cerebras",
                        "parasail",
                        "sgl"
                      ]
                    },
                    "keys": {
                      "type": "array",
                      "description": "API keys for the embedding provider",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1
                    },
                    "embedding_model": {
                      "type": "string",
                      "description": "Model to use for generating embeddings (optional)"
                    },
                    "cleanup_on_shutdown": {
                      "type": "boolean",
                      "description": "Clean up cache on shutdown (default: false)"
                    },
                    "ttl": {
                      "description": "Time-to-live for cached responses (supports duration strings like '5m', '1h' or seconds as number, default: 5min)",
                      "oneOf": [
                        {
                          "type": "string",
                          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$"
                        },
                        {
                          "type": "integer",
                          "minimum": 0
                        }
                      ]
                    },
                    "threshold": {
                      "type": "number",
                      "description": "Cosine similarity threshold for semantic matching (default: 0.8)",
                      "minimum": 0,
                      "maximum": 1
                    },
                    "vector_store_namespace": {
                      "type": "string",
                      "description": "Namespace for vector store (optional)"
                    },
                    "dimension": {
                      "type": "integer",
                      "description": "Dimension for vector store embeddings",
                      "minimum": 1
                    },
                    "conversation_history_threshold": {
                      "type": "integer",
                      "description": "Skip caching for requests with more than this number of messages in conversation history (default: 3)",
                      "minimum": 0
                    },
                    "cache_by_model": {
                      "type": "boolean",
                      "description": "Include model in cache key (default: true)"
                    },
                    "cache_by_provider": {
                      "type": "boolean",
                      "description": "Include provider in cache key (default: true)"
                    },
                    "exclude_system_prompt": {
                      "type": "boolean",
                      "description": "Exclude system prompt in cache key (default: false)"
                    }
                  },
                  "required": [
                    "provider",
                    "keys",
                    "dimension"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "name": {
                  "const": "otel"
                }
              }
            },
            "then": {
              "required": [
                "config"
              ],
              "properties": {
                "config": {
                  "type": "object",
                  "description": "Configuration for the OpenTelemetry plugin",
                  "properties": {
                    "collector_url": {
                      "type": "string",
                      "description": "URL of the OpenTelemetry collector",
                      "oneOf": [
                        {
                          "format": "uri"
                        },
                        {
                          "pattern": "^[^:\\s]+:\\d+$"
                        }
                      ]
                    },
                    "trace_type": {
                      "type": "string",
                      "description": "Type of trace to use for the OTEL collector",
                      "enum": [
                        "otel"
                      ]
                    },
                    "protocol": {
                      "type": "string",
                      "description": "Protocol to use for the OTEL collector",
                      "enum": [
                        "http",
                        "grpc"
                      ]
                    }
                  },
                  "required": [
                    "collector_url",
                    "trace_type",
                    "protocol"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "additionalProperties": false
      }
    }
  },
  "additionalProperties": false,
  "$defs": {
    "network_config": {
      "type": "object",
      "properties": {
        "base_url": {
          "type": "string",
          "format": "uri",
          "description": "Base URL for the provider (optional, required for Ollama)"
        },
        "extra_headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional headers to send with requests"
        },
        "default_request_timeout_in_seconds": {
          "type": "integer",
          "minimum": 1,
          "description": "Default request timeout in seconds"
        },
        "max_retries": {
          "type": "integer",
          "minimum": 0,
          "description": "Maximum number of retries"
        },
        "retry_backoff_initial_ms": {
          "type": "integer",
          "minimum": 0,
          "description": "Initial retry backoff in milliseconds"
        },
        "retry_backoff_max_ms": {
          "type": "integer",
          "minimum": 0,
          "description": "Maximum retry backoff in milliseconds"
        }
      },
      "additionalProperties": false
    },
    "concurrency_config": {
      "type": "object",
      "properties": {
        "concurrency": {
          "type": "integer",
          "minimum": 1,
          "description": "Number of concurrent requests"
        },
        "buffer_size": {
          "type": "integer",
          "minimum": 1,
          "description": "Buffer size for requests"
        }
      },
      "required": [
        "concurrency",
        "buffer_size"
      ],
      "additionalProperties": false
    },
    "base_key": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "API key value (can use env. prefix)"
        },
        "models": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Supported models for this key"
        },
        "weight": {
          "type": "number",
          "minimum": 0,
          "description": "Weight for load balancing"
        }
      },
      "required": [
        "weight"
      ],
      "additionalProperties": false
    },
    "bedrock_key": {
      "allOf": [
        {
          "$ref": "#/$defs/base_key"
        },
        {
          "type": "object",
          "properties": {
            "bedrock_key_config": {
              "type": "object",
              "properties": {
                "access_key": {
                  "type": "string",
                  "description": "AWS access key (can use env. prefix)"
                },
                "secret_key": {
                  "type": "string",
                  "description": "AWS secret key (can use env. prefix)"
                },
                "session_token": {
                  "type": "string",
                  "description": "AWS session token (can use env. prefix)"
                },
                "deployments": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Model to deployment mappings"
                },
                "arn": {
                  "type": "string",
                  "description": "AWS ARN"
                },
                "region": {
                  "type": "string",
                  "description": "AWS region"
                }
              },
              "required": [
                "region"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "bedrock_key_config"
          ]
        }
      ]
    },
    "azure_key": {
      "allOf": [
        {
          "$ref": "#/$defs/base_key"
        },
        {
          "type": "object",
          "properties": {
            "azure_key_config": {
              "type": "object",
              "properties": {
                "endpoint": {
                  "type": "string",
                  "description": "Azure endpoint (can use env. prefix)"
                },
                "deployments": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Model to deployment mappings"
                },
                "api_version": {
                  "type": "string",
                  "description": "Azure API version"
                }
              },
              "required": [
                "endpoint",
                "api_version"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "azure_key_config"
          ]
        }
      ]
    },
    "vertex_key": {
      "allOf": [
        {
          "$ref": "#/$defs/base_key"
        },
        {
          "type": "object",
          "properties": {
            "vertex_key_config": {
              "type": "object",
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "Google Cloud project ID (can use env. prefix)"
                },
                "region": {
                  "type": "string",
                  "description": "Google Cloud region"
                },
                "auth_credentials": {
                  "type": "string",
                  "description": "Authentication credentials (can use env. prefix)"
                }
              },
              "required": [
                "project_id",
                "region"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "vertex_key_config"
          ]
        }
      ]
    },
    "provider": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/base_key"
          },
          "minItems": 1,
          "description": "API keys for this provider"
        },
        "network_config": {
          "$ref": "#/$defs/network_config"
        },
        "concurrency_and_buffer_size": {
          "$ref": "#/$defs/concurrency_config"
        },
        "proxy_config": {
          "$ref": "#/$defs/proxy_config"
        },
        "send_back_raw_response": {
          "type": "boolean",
          "description": "Include raw response in BifrostResponse (default: false)"
        }
      },
      "required": [
        "keys"
      ],
      "additionalProperties": false
    },
    "provider_with_bedrock_config": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/bedrock_key"
          },
          "minItems": 1,
          "description": "API keys for this provider"
        },
        "network_config": {
          "$ref": "#/$defs/network_config"
        },
        "concurrency_and_buffer_size": {
          "$ref": "#/$defs/concurrency_config"
        },
        "proxy_config": {
          "$ref": "#/$defs/proxy_config"
        },
        "send_back_raw_response": {
          "type": "boolean",
          "description": "Include raw response in BifrostResponse (default: false)"
        }
      },
      "required": [
        "keys"
      ],
      "additionalProperties": false
    },
    "provider_with_azure_config": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/azure_key"
          },
          "minItems": 1,
          "description": "API keys for this provider"
        },
        "network_config": {
          "$ref": "#/$defs/network_config"
        },
        "concurrency_and_buffer_size": {
          "$ref": "#/$defs/concurrency_config"
        },
        "proxy_config": {
          "$ref": "#/$defs/proxy_config"
        },
        "send_back_raw_response": {
          "type": "boolean",
          "description": "Include raw response in BifrostResponse (default: false)"
        }
      },
      "required": [
        "keys"
      ],
      "additionalProperties": false
    },
    "provider_with_vertex_config": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/vertex_key"
          },
          "minItems": 1,
          "description": "API keys for this provider"
        },
        "network_config": {
          "$ref": "#/$defs/network_config"
        },
        "concurrency_and_buffer_size": {
          "$ref": "#/$defs/concurrency_config"
        },
        "proxy_config": {
          "$ref": "#/$defs/proxy_config"
        },
        "send_back_raw_response": {
          "type": "boolean",
          "description": "Include raw response in BifrostResponse (default: false)"
        }
      },
      "required": [
        "keys"
      ],
      "additionalProperties": false
    },
    "mcp_client_config": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the MCP client"
        },
        "connection_type": {
          "type": "string",
          "enum": [
            "stdio",
            "websocket",
            "http"
          ],
          "description": "Connection type for MCP client"
        },
        "stdio_config": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "Command to execute"
            },
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Command arguments"
            },
            "envs": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Environment variables"
            }
          },
          "required": [
            "command"
          ],
          "additionalProperties": false
        },
        "websocket_config": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "format": "uri",
              "description": "WebSocket URL"
            }
          },
          "required": [
            "url"
          ],
          "additionalProperties": false
        },
        "http_config": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "format": "uri",
              "description": "HTTP URL"
            }
          },
          "required": [
            "url"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "name",
        "connection_type"
      ],
      "additionalProperties": false,
      "oneOf": [
        {
          "properties": {
            "connection_type": {
              "const": "stdio"
            }
          },
          "required": [
            "stdio_config"
          ]
        },
        {
          "properties": {
            "connection_type": {
              "const": "websocket"
            }
          },
          "required": [
            "websocket_config"
          ]
        },
        {
          "properties": {
            "connection_type": {
              "const": "http"
            }
          },
          "required": [
            "http_config"
          ]
        }
      ]
    },
    "weaviate_config": {
      "type": "object",
      "description": "Weaviate configuration for vector store",
      "properties": {
        "scheme": {
          "type": "string",
          "description": "Weaviate server scheme (http or https) - REQUIRED"
        },
        "host": {
          "type": "string",
          "description": "Weaviate server host (host:port) - REQUIRED"
        },
        "api_key": {
          "type": "string",
          "description": "API key for Weaviate authentication (optional)"
        },
        "grpc_config": {
          "type": "object",
          "properties": {
            "host": {
              "type": "string",
              "description": "Weaviate server host (host:port). If host is without a port number then the 80 port for insecured and 443 port for secured connections will be used."
            },
            "secured": {
              "type": "boolean",
              "description": "Secured set it to true if it's a secured connection"
            }
          }
        },
        "headers": {
          "type": "object",
          "description": "Additional headers to send with requests"
        },
        "timeout": {
          "type": "string",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "description": "Timeout for Weaviate operations (e.g., '5s')"
        },
        "class_name": {
          "type": "string",
          "description": "Class name for Weaviate vector store"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "Properties for Weaviate vector store"
        }
      },
      "required": [
        "scheme",
        "host"
      ],
      "additionalProperties": false
    },
    "proxy_config": {
      "type": "object",
      "description": "Proxy configuration for provider connections",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "none",
            "http",
            "socks5",
            "environment"
          ],
          "description": "Type of proxy to use"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "URL of the proxy server"
        },
        "username": {
          "type": "string",
          "description": "Username for proxy authentication"
        },
        "password": {
          "type": "string",
          "description": "Password for proxy authentication"
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "clusterConfig": {
      "type": "object",
      "description": "Cluster mode configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether cluster mode is enabled"
        },
        "peers": {
          "type": "array",
          "description": "List of peer addresses",
          "items": {
            "type": "string",
            "description": "Peer address in host:port format"
          }
        },
        "gossip": {
          "type": "object",
          "description": "Gossip protocol configuration",
          "properties": {
            "port": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535,
              "description": "Port for gossip communication"
            },
            "config": {
              "type": "object",
              "description": "Gossip protocol settings",
              "properties": {
                "livenessProbeEverySeconds": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Interval between liveness probes in seconds"
                },
                "timeoutSeconds": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Timeout for operations in seconds"
                },
                "successThreshold": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Number of successful probes required"
                },
                "failureThreshold": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Number of failed probes before marking as failed"
                }
              },
              "required": [
                "livenessProbeEverySeconds",
                "timeoutSeconds",
                "successThreshold",
                "failureThreshold"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "port",
            "config"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "enabled"
      ],
      "additionalProperties": false
    }
  }
}